using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Microsoft.Office.Interop.Excel;
using ExcelCore;

namespace ExcelDesktop.Windows
{
    public partial class FormulaBar : UserControl
    {
        private WorkbookManager workbookManager;
        private CellManager cellManager;
        private FormulaEngine formulaEngine;
        private TextBox formulaTextBox;
        private Button fxButton;
        private ComboBox nameBox;

        public FormulaBar(WorkbookManager workbookManager, CellManager cellManager, FormulaEngine formulaEngine)
        {
            InitializeComponent();

            // Set workbookManager, cellManager, and formulaEngine properties
            this.workbookManager = workbookManager;
            this.cellManager = cellManager;
            this.formulaEngine = formulaEngine;

            // Subscribe to CellSelectionChanged event
            this.cellManager.CellSelectionChanged += OnCellSelectionChanged;

            // Initialize UI elements
            InitializeUIElements();
        }

        private void InitializeComponent()
        {
            // Load XAML components
            // This method is typically auto-generated by Visual Studio
            // Set up event handlers for UI elements
            formulaTextBox.TextChanged += OnFormulaTextChanged;
            fxButton.Click += OnFxButtonClick;
            nameBox.SelectionChanged += OnNameBoxSelectionChanged;
        }

        private void InitializeUIElements()
        {
            // Additional UI initialization if needed
        }

        private void OnCellSelectionChanged(object sender, CellSelectionChangedEventArgs e)
        {
            // Get selected cell from CellManager
            var selectedCell = cellManager.GetSelectedCell();

            // Update formulaTextBox with cell formula or value
            formulaTextBox.Text = selectedCell.Formula ?? selectedCell.Value?.ToString() ?? string.Empty;

            // Update nameBox with cell address
            nameBox.Text = selectedCell.Address;
        }

        private void OnFormulaTextChanged(object sender, TextChangedEventArgs e)
        {
            // Get current text from formulaTextBox
            string formula = formulaTextBox.Text;

            // Validate formula using FormulaEngine
            bool isValid = formulaEngine.ValidateFormula(formula);

            if (isValid)
            {
                // Update cell value in CellManager
                cellManager.UpdateCellFormula(cellManager.GetSelectedCell(), formula);

                // Trigger recalculation of dependent cells
                workbookManager.RecalculateDependentCells(cellManager.GetSelectedCell());
            }
            else
            {
                // TODO: Implement error handling for invalid formulas
            }
        }

        private void OnFxButtonClick(object sender, RoutedEventArgs e)
        {
            // Open function wizard dialog
            var functionWizard = new FunctionWizardDialog();
            if (functionWizard.ShowDialog() == true)
            {
                // If function is selected, insert it into formulaTextBox
                string selectedFunction = functionWizard.SelectedFunction;
                formulaTextBox.Text += selectedFunction;
                formulaTextBox.CaretIndex = formulaTextBox.Text.Length;
            }
        }

        private void OnNameBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // Get selected cell address or named range
            string selectedAddress = nameBox.SelectedItem as string;

            if (!string.IsNullOrEmpty(selectedAddress))
            {
                // Update cell selection in CellManager
                cellManager.SelectCell(selectedAddress);

                // Update formulaTextBox with new cell content
                var selectedCell = cellManager.GetCell(selectedAddress);
                formulaTextBox.Text = selectedCell.Formula ?? selectedCell.Value?.ToString() ?? string.Empty;
            }
        }
    }
}

// TODO: Human tasks
// - Implement error handling for invalid formulas
// - Add support for multi-cell selection in the formula bar
// - Implement auto-completion for function names and cell references
// - Add localization support for formula bar UI elements
// - Implement undo/redo functionality for formula edits